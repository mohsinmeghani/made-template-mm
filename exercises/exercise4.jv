pipeline tempreturs{

Extractor  -> filepicker -> toText -> toCSV;

toCSV
-> changeHeaders
-> changeHeaders2
-> toTable
-> CelsiusToFahrenheitTransformer
-> CelsiusToFahrenheitTransformer2
-> toDb;

 block Extractor oftype GTFSExtractor {
        url:"https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }


block filepicker oftype FilePicker {
   path: "/data.csv";
 }

block toText oftype TextFileInterpreter{
    encoding: "utf8";
}

block toCSV oftype CSVInterpreter{
        delimiter:";";
}


block changeHeaders oftype CellWriter {
        at: range A1:E1;
        write: ['id','producer','model','month','temperature'];
    }

block changeHeaders2 oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }



block toTable oftype TableInterpreter{
        header: true;
        columns:[
            "id" oftype positiveInt,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    
    }

 block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitTransformer2 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }



 transform CelsiusToFahrenheit {
   from Celsius oftype decimal;
   to Fahrenheit oftype decimal;

   Fahrenheit: (Celsius * 9/5) + 32;
 }



block toDb oftype SQLiteLoader{
        table:"temperatures";
        file:"./temperatures.sqlite";
    }


valuetype positiveInt oftype integer{
        constraints: [
            c_postivenum
        ];
    }

 constraint c_postivenum on integer:
    value >= 0;   


}